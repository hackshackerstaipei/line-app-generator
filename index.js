// Generated by LiveScript 1.3.1
xfl.load("https://plotdb.github.io/xl-fontset/alpha/王漢宗細黑/", {}, function(font){
  var paths, getBubble, bubblify, local, inputAvatar;
  paths = ["M40.936,0C31.91,0,23.812,3.958,18.27,10.227c-5.781,0.615-12.91-0.888-18.156-6.496\nc0,8.808,4.914,14.042,11.761,18.126c-0.769,2.666-1.189,5.48-1.189,8.394", ['L', 71.187, 30.251, 'C', 71.187, 13.544, 57.643, 0, 40.936, 0], ['L', 40.936, 60.502, 'c', 16.707, 0, 30.251, -13.544, 30.251, -30.251], ['L', 10.685, 30.251, 'c', 0, 16.707, 13.544, 30.251, 30.251, 30.251]];
  getBubble = function(w, h, rev){
    var ref$, p1, p2, p3, d, ow, oh, transform, fill, out;
    rev == null && (rev = false);
    ref$ = [w - 71, h - 61], w = ref$[0], h = ref$[1];
    ref$ = [1, 2, 3].map(function(it){
      return JSON.parse(JSON.stringify(paths[it]));
    }), p1 = ref$[0], p2 = ref$[1], p3 = ref$[2];
    [1, 4, 6, 8].map(function(it){
      return p1[it] += w;
    });
    p2[1] += w;
    p2[2] += h;
    p3[2] += h;
    d = paths[0] + p3.join(' ') + p2.join(' ') + p1.join(' ');
    ow = 71 + w;
    oh = 61 + h;
    transform = rev ? "scale(-1 1) translate(-" + (w + 71) + ",0)" : "scale(1 1)";
    fill = rev ? '#a2de52' : 'white';
    out = "<?xml version=\"1.0\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 " + ow + " " + oh + "\" style=\"width:" + ow + "px;height:" + oh + "px\">\n  <path d=\"" + d + "\" fill=\"" + fill + "\" transform=\"" + transform + "\"/>\n</svg>";
    out = "data:image/svg+xml;base64," + btoa(out);
    return out;
  };
  Array.from(document.querySelectorAll('.bubble')).map(function(n){
    var box, rev;
    box = n.getBoundingClientRect();
    rev = n.classList.contains('rev');
    return n.style.backgroundImage = "url(" + getBubble(box.width, box.height, rev) + ")";
  });
  bubblify = function(n, rev){
    var box;
    box = n.getBoundingClientRect();
    return n.style.backgroundImage = "url(" + getBubble(box.width, box.height, rev) + ")";
  };
  local = {
    text: ""
  };
  document.querySelector('#input-send').addEventListener('click', function(){
    var cs, talk, conv, name, avatar, time, bubble, ref$, h, m, cj, info, a, url;
    cs = document.querySelector('#check-self');
    talk = document.querySelector("#talk-sample" + (cs.checked ? '-self' : '')).cloneNode(true);
    talk.setAttribute('id', null);
    conv = document.querySelector('.content');
    name = talk.querySelector('.name');
    avatar = talk.querySelector('.avatar');
    time = talk.querySelector('.time');
    bubble = talk.querySelector('.bubble');
    ref$ = [new Date().getHours(), new Date().getMinutes()].map(function(it){
      if ((it + "").length < 2) {
        return "0" + it;
      } else {
        return it + "";
      }
    }), h = ref$[0], m = ref$[1];
    time.innerText = h + ":" + m + " PM";
    if (!cs.checked) {
      name.innerText = document.querySelector('#input-name').value || "Unnamed";
    }
    bubble.innerText = document.querySelector('#input-msg').value || "...";
    local.text += name.innerText + bubble.innerText;
    font.sync(local.text);
    conv.classList.add(font.className);
    cj = document.querySelector('#check-join');
    if (cj.checked) {
      info = document.querySelector('#info-sample').cloneNode(true);
      info.setAttribute('id', '');
      info.childNodes[0].innerText = name.innerText + " joined the group.";
      conv.appendChild(info);
    }
    conv.appendChild(talk);
    if (!cs.checked && (a = document.querySelector('#input-avatar .avatar.active'))) {
      url = a.getAttribute("data-url");
      if (url) {
        avatar.style.backgroundImage = "url(" + url + ")";
      } else {
        avatar.style.backgroundImage = "url(avatar/" + a.getAttribute('data-idx') + ".jpg)";
      }
    }
    return bubblify(bubble, cs.checked);
  });
  document.querySelector('#input-avatar').addEventListener('click', function(e){
    var idx, url, that;
    if (!e.target || !e.target.getAttribute) {
      return;
    }
    idx = e.target.getAttribute('data-idx');
    url = e.target.getAttribute('data-url');
    if (that = document.querySelector('#input-avatar .avatar.active')) {
      that.classList.remove('active');
    }
    if (idx) {
      e.target.classList.add('active');
    }
    if (url) {
      return e.target.classList.add('active');
    }
  });
  document.querySelector('#group-name').addEventListener('keyup', function(e){
    return document.querySelector('.head .title').innerText = this.value;
  });
  inputAvatar = document.querySelector('#input-avatar');
  return document.querySelector('#avatar-upload').addEventListener('change', function(e){
    var files, fr, t, encoding;
    files = e.target.files;
    fr = new FileReader();
    t = 'arraybuffer';
    encoding = 'utf-8';
    fr.onload = function(){
      var type, url, nv;
      console.log(files[0]);
      type = 'png';
      url = URL.createObjectURL(new Blob([new Uint8Array(fr.result)], {
        type: "image/" + type
      }));
      nv = document.createElement("div");
      nv.classList.add('avatar');
      nv.setAttribute('data-url', url);
      nv.style.backgroundImage = "url(" + url + ")";
      return inputAvatar.appendChild(nv);
    };
    if (t === 'dataurl') {
      return fr.readAsDataURL(files[0]);
    } else if (t === 'arraybuffer') {
      return fr.readAsArrayBuffer(files[0]);
    }
  });
});